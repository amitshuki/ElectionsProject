//int main() {
//	UniformState ufs(30);
//	string name("citizen");
//	int i = 1;
//	for (i = 0; i < 1000; i++)
//		ufs.addCitizen(name, i, 1994);
//	ufs.addParty("Dumbo", 0);
//	ufs.addParty("Ior", 100);
//
//	for (i = 0; i < 30; i++) {
//		ufs.addCitizenAsPartyRep(i, 1);
//		ufs.addCitizenAsPartyRep(i+30, 2);
//	}
//
//	for (i = 0; i < 300; i++)
//		ufs.vote(i, 1);
//	for (i = 0; i < 300; i++)
//		ufs.vote(i + 500, 2);
//
//	ofstream outfile("test.bin", ios::binary | ios::trunc);
//	if (!outfile)
//		exit(-2);
//	StateLoader::save(outfile, ufs);
//	outfile.close();
//
//	State* state;
//
//
//	ifstream infile("test.bin", ios::binary);
//	if (!infile)
//		exit(-4);
//	state = StateLoader::load(infile);
//	infile.close();
//	state->showElectionsResults();
//	delete state;
//}



//int main() {
//	DistrictBasedState* dbs = new DistrictBasedState();
//	dbs->addDistrict(string("A"), 15, DistrictType::DIVIDED);
//	dbs->addDistrict(string("B"), 10, DistrictType::UNIFIED);
//	dbs->addDistrict(string("C"), 10, DistrictType::UNIFIED);
//	string name("citizen");
//	int i = 1;
//	for (i = 0; i < 100; i++)
//		dbs->addCitizen(name, i, 1994, 1);
//	for (i = 100; i < 200; i++)
//		dbs->addCitizen(name, i, 1995, 2);
//	for (i = 200; i < 300; i++)
//		dbs->addCitizen(name, i, 1996, 3);
//
//	dbs->addParty(string("Dumbo"), 0);
//	dbs->addParty(string("Ior"), 100);
//	for (i = 0; i < 15; i++) {
//		dbs->addCitizenAsPartyRepInDist(i, 1, 1);
//		dbs->addCitizenAsPartyRepInDist(i + 15, 1, 2);
//		dbs->addCitizenAsPartyRepInDist(i + 30, 1, 3);
//		dbs->addCitizenAsPartyRepInDist(i + 45, 2, 1);
//		dbs->addCitizenAsPartyRepInDist(i + 60, 2, 2);
//		dbs->addCitizenAsPartyRepInDist(i + 75, 2, 3);
//	}
//
//	for (i = 0; i < 60; i++)
//		dbs->vote(i, 1);
//	for (i = 0; i < 40; i++)
//		dbs->vote(i+60, 2);
//	for (i = 0; i < 25; i++) {
//		dbs->vote(i+100, 1);
//		dbs->vote(i + 125, 2);
//	}
//	for (i = 0; i < 40; i++) {
//		dbs->vote(i + 200, 1);
//	}
//	for (i = 0; i < 50; i++) {
//		dbs->vote(i + 240, 2);
//	}
//	/*dbs->showElectionsResults();
//	delete dbs;
//	cout << "===========================================" << endl;
//	cout << "===========================================" << endl;
//	cout << "===========================================" << endl;*/
//	ofstream outfile("test.bin", ios::binary | ios::trunc);
//	if (!outfile)
//		exit(-2);
//	StateLoader::save(outfile, *dbs);
//	outfile.close();
//	
//	delete dbs;
//
//	ifstream infile("test.bin", ios::binary);
//	if (!infile)
//		exit(-4);
//	dbs = dynamic_cast<DistrictBasedState*>(StateLoader::load(infile));
//	infile.close();
//
//	dbs->showElectionsResults();
//	delete dbs;
//}